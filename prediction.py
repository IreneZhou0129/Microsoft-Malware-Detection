#!/usr/bin/env python
# coding: utf-8

# ===================================================
#
# Read sample.csv and do modification on it
#
# ===================================================
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import cross_val_score as cvs
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import f1_score as f1s
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
from tqdm import tqdm
from sklearn.impute import SimpleImputer
import sys
from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.decomposition import PCA
import warnings

warnings.filterwarnings('ignore')

train = pd.read_csv('my_train.csv')


test = pd.read_csv('my_test.csv')


# prepare data for building models

# Split features and the ground truth
train_x = train[train.columns[:-2]]
train_y = train[train.columns[-1]]

# drop the first column: MachineIdentifier
train_x = train_x.drop('MachineIdentifier', axis=1)


# Split features and the ground truth
test_x = test[test.columns[:-2]]
test_y = test[test.columns[-1]]

# drop the first column: MachineIdentifier
test_x = test_x.drop('MachineIdentifier', axis=1)


# decision tree model

# Build model
dtreeModel = DecisionTreeRegressor()

# Fit model
dtreeModel.fit(train_x, train_y)

predictions = dtreeModel.predict(test_x)

# MAE
mean_absolute_error(test_y, predictions)


# Precision Recall Fscore support

# convert series, nd array into list
test_y_lst = (test_y.values).tolist()
predictions_lst = predictions.tolist()

# there is a special case has 0.5
predictions_lst[642787] = 0


f1s(test_y_lst, predictions_lst, average="macro")


# randome forest model

# build the model
forestModel = RandomForestRegressor(random_state=1)

# train the model
forestModel.fit(train_x, train_y)

# make prediction
pred2 = (forestModel.predict(test_x)).tolist()

# MAE
mae = mean_absolute_error(test_y_lst, pred2)


# rounded each number to calculate the F1 score
rounded_pred2 = []
for i in pred2:
    rounded_pred2.append(round(i))

# F1 Score
fscore = f1s(test_y_lst, rounded_pred2, average="macro")

print("MAE: ", mae)
print("F1 Score: ", fscore)


reg = LinearRegression()

k = 38

cv_result = cvs(reg, train_x, train_y, cv=k)

print('CV Scores average: ', np.sum(cv_result) / k)


# # Lasso
# from sklearn.linear_model import Lasso

# lasso = Lasso(alpha = 0.1, normalize = True)
# lasso.fit(train_x, train_y)

# pred3 = lasso.predict(test_x)

# print('Lasso score: ',lasso.score(test_x, test_y))
